

create table
  public.profiles (
    id uuid not null,
    updated_at timestamp with time zone null,
    username text null,
    full_name text null,
    avatar_url text null,
    website text null,
    is_manager text null,
    organization text null,
    email character varying null,
    last_signed_in timestamp with time zone null,
    api_key text null,
    runs bigint null,
    paying boolean null,
    runs_date text null,
    first_time boolean null default true,
    private_key uuid null,
    plan text null default 'free'::text,
    organization_name text null default ''::text,
    client_reference_id text null,
    basic_html boolean null default false,
    rate_limit bigint null default '200'::bigint,
    runs_day text null,
    runs_per_day bigint null default '0'::bigint,
    role text null default 'admin'::text,
    has_completed_onboarding boolean null,
    constraint profiles_pkey primary key (id),
    constraint profiles_username_key unique (username),
    constraint profiles_id_fkey foreign key (id) references auth.users (id) on delete cascade,
    constraint username_length check ((char_length(username) >= 3))
  ) tablespace pg_default;




create table
  public.roles (
    id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    name text not null,
    view_projects boolean not null default false,
    edit_projects boolean not null default false,
    invite_users boolean not null default false,
    remove_users boolean not null default false,
    export_flows boolean not null default false,
    edit_roles boolean not null default false,
    constraint roles_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.auth_sso (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    provider text null,
    org_id text null,
    org_name text null,
    role_id uuid null,
    constraint auth_sso_pkey primary key (id),
    constraint public_auth_sso_auth_role_id_fkey foreign key (role_id) references roles (id)
  ) tablespace pg_default;

create table
  public.organizations (
    org_id text not null,
    created_at timestamp with time zone not null default now(),
    org_name text null,
    org_plan text null default 'free'::text,
    stripe_client_reference_id text null,
    stripe_customer_id text null,
    public_key uuid null default gen_random_uuid (),
    private_key uuid null default gen_random_uuid (),
    rate_limit bigint null default '200'::bigint,
    runs_date text null default ''::text,
    runs bigint not null default '0'::bigint,
    runs_day text null default ''::text,
    runs_per_day bigint not null default '0'::bigint,
    client_reference_id text null,
    constraint Organizations_pkey primary key (org_id),
    constraint organizations_client_reference_id_key unique (stripe_client_reference_id)
  ) tablespace pg_default;



  create table
  public.groups (
    created_at timestamp with time zone not null default now(),
    org_id text null,
    name text null,
    group_id uuid not null default gen_random_uuid (),
    description text null,
    constraint groups_pkey primary key (group_id),
    constraint groups_group_id_key unique (group_id),
    constraint groups_org_id_fkey foreign key (org_id) references organizations (org_id)
  ) tablespace pg_default;

  
create table
  public.user_groups (
    created_at timestamp with time zone not null default now(),
    user_id uuid not null,
    group_id uuid not null,
    constraint user_groups_pkey primary key (user_id, group_id),
    constraint public_user_groups_group_id_fkey foreign key (group_id) references groups (group_id) on update cascade on delete cascade,
    constraint public_user_groups_user_id_fkey foreign key (user_id) references profiles (id) on update cascade on delete cascade
  ) tablespace pg_default;

create table
  public.user_organizations (
    created_at timestamp with time zone not null default now(),
    user_id uuid not null,
    org_id text not null,
    invitation_status text null default 'accepted'::text,
    role text null default 'admin'::text,
    root boolean null default true,
    role_id uuid null default '4a325d88-a6d0-40e6-b59c-c375acba5d48'::uuid,
    is_current boolean not null default true,
    constraint user_organizations_pkey primary key (user_id, org_id),
    constraint public_user_organizations_org_id_fkey foreign key (org_id) references organizations (org_id) on update cascade on delete cascade,
    constraint public_user_organizations_role_id_fkey foreign key (role_id) references roles (id) on update cascade on delete set null,
    constraint public_user_organizations_user_id_fkey foreign key (user_id) references profiles (id) on update cascade on delete cascade
  ) tablespace pg_default;

  create table
  public.connections (
    connection_id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    user_id uuid null,
    connection_provider_name text null,
    connection_provider_data jsonb null,
    org_id text not null,
    role text null default 'admin'::text,
    constraint connections_pkey primary key (connection_id),
    constraint connections_connection_id_key unique (connection_id),
    constraint connections_user_id_fkey foreign key (user_id) references profiles (id) on update cascade on delete cascade,
    constraint public_connections_org_id_fkey foreign key (org_id) references organizations (org_id) on update cascade on delete cascade
  ) tablespace pg_default;
  